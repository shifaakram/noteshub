### INTRODUCTION TO DATABASE SYSTEM

**7.1 DATABASE**

A database stores data in organized form. A database is composed of tables which contain rows and columns. These rows and columns are called records and elds respectively. Most databases contain multiple tables. For example, a general store database may include tables for purchase, sales and stock records. Each of these tables has different elds that are relevant to the information stored in the table. Generally, a database is an electronic system that facilitates easy access, manipulation and updating of data.

**Use of Database**

Nowadays, everyone is familiar with term database, it is mathematically developed data structure which converts raw input data into meaningful information for a particular organization. These days, database can be seen in every eld of life, for example in industries, health, agriculture, schooling, business and banking. The databases can be developed according to the size of its records for a particular organization. Databases can be small in size with a few records or very large like NADRA (National Database Registration Authority) databases which keep the multi millions of records. A database is playing a leading role to enhance the efciency and performance of any organization. The goal of database is to minimize the loss and increase the productivity and efciency of any organization in the age of information technology.

**7.1.1 Database Management System (DBMS)**

Databases are usually developed, maintained and controlled by the Database Management System (DBMS). The DBMS essentially serves as an interface between databases and end users or application programs, ensuring that data is consistently organized and remains easily accessible. Here are some examples of popular DBMSs used these days:

*   MySql
*   Oracle
*   Microsoft SQL Server
*   MongoDB
*   Visual Foxpro
*   IBM Db2
*   PostgreSQL

**7.1.2 Flat File System**

Early databases were relatively "at", which means they were limited to simple rows and columns, like a spreadsheet. A at le is the older version of database. It stores data in a single table structure. Flat le databases are usually in plain text format, with only one record per line. The elds included in the record are separated using delimiters such as tabs or commas.

**7.1.3 Advantages of Database Management System over the Flat File System:**

*   Allows non-duplication and integrity
*   Does not support remote connections
*   Good for small, medium and large businesses
*   Limited only to smaller data management needs
*   Supports online access
*   Increases duplicate and redundant data
*   Suitable only for smaller sets of data
*   Multiple users can access data simultaneously
*   Only one user can access at a time
*   Capable of handling huge sets of data

**Characteristics of Database Management System**

A DBMS is modern version of database designing, organization and manipulation. This mainly offers the solutions which a at le system could not provide. The DBMS has many characteristics. Some of them are:

*   Multiple users can access DBMS and can view, add, edit and delete records.
*   A DBMS offers tools like Queries, Views and Forms which help users to manipulate data easily and more efciently.
*   A DBMS is more secure and reliable.
*   DBMS allows distribution of data in multiple tables by making use of features like keys and relationships between elds of those tables. This allows lesser duplication of data and results in lesser redundancy.
*   Preparing backups and providing limited permissions to the users are features of DBMS.
*   DBMS can handle large and complex data more conveniently. Therefore, it is preferred by the medium and large organizations.

**BASIC COMPONENTS OF DBMS**

The basic components of DBMS are discussed below:

**(i) Table**

It is a collection of data elements organized in shape of rows and columns. A contact list may be one of the simplest examples of a table. The marks record prepared by a class teacher is also an example of a table.

**(ii) Field**

It is the smallest component in a database. It is where the actual data is stored during data entry. All data elds in the same table, have unique names. Fields are also called attributes or columns. Multiple elds make up a data record, several data records make up a data table, and several data tables make up a database.

**(iii) Record**

A single entry in a table is called a record. Records are also referred as tuples or rows. A record is made up of two or several data items which are also called tuples in a table representing a set of related data. For example, the illustrated Student table (Fig: 7.2) has 4 tuples /records/rows.

**(iv) Data Types**

All elds in a table must have some data type. Data type is a data storage format that can contain a specic type or range of values. The data type of a eld is a property that tells what kind of data that eld can hold. Here are some basic data types. Different DBMSs offer different range of data types to be stored. For example, MS Access allows a range of whole numbers from -32768 to 32767 for an “Integer”. In modern DBMS, choosing proper data type is important to make sure that database runs faster.

*   **Integer:** Holds only whole numbers. Examples: 145, -35, 74586
*   **Floating Point:** Holds numbers with decimal points. Examples: 5.6, 3.14, 554.9
*   **Character:** Stores only one character. Examples: A, B, c, d
*   **String:** Can store a combination of numbers, letters and special characters. Examples: Pakistan, Computer, @admin
*   **Boolean:** Can hold only Boolean values i.e. true or false. Examples: 1,0
*   **Date & Time:** Stores date and time in specied format. Example: 01-01-2020 11:30

**(v) Views**

In a database the data is stored in tables. However, we can see that data through views. Views do not store data and just show the information virtually. They have the ability to fetch data from different tables. Views maintain the security of data and ensure that no changes occur in the original data. Now we will learn how can we create Tables and Views in MS Access.

**(i) Steps for creating a table using Design View:**

1.  To create tables in Access using “Design View,” click on the Create tab and click on the Table icon. Then pull down the View menu and choose Design View.
2.  A new table then appears in the Table Design View. Note that the default name assigned to the table is Table1.
3.  Type the name of a eld into the “Field Name” column.
4.  Then use the drop-down menu in the “Data Type” column to assign the eld a data type.
    *   **Customer ID:** Number (The Unique Identier for a customer)
    *   **First Name:** Text (The First Name of the customer)
    *   **Last Name:** Text (The Last Name of the customer)
    *   **Address:** Text (The Address of the customer)
5.  If desired, type a description of the data stored in this eld.
6.  Repeat steps 4 and 5 until you have created all of the necessary table elds. An example of a Table may be customer Table that has following entries.
7.  Click the “Save” button in the Quick Access toolbar.
8.  Then type a name for the newly created table and click “OK”.

**(ii) Steps for creating a query or view using Design View:**

1.  To make a query in design view, click on the “Create” tab in the Ribbon and pull down the “Queries” group and click on “Query Design” button.
2.  In the “Show Table” dialog box, add the table or tables that you want to add to query design view.
3.  Next, add the elds from these tables that you want to view in your query results or view. If you want to add all of the elds of a table into your result set, you can click and drag the rst eld in the table, shown as an asterisk.
4.  Once you have added all the necessary tables and elds to the query or view, click the “Close” button in the “Show Table” dialog box to close it and display the query design view.
5.  To run a query and view the result set, you can click the “Run” button in the “Results” group of the “Design” tab in the “Query Tools” contextual tab on the ofce Ribbon.
6.  The result set looks like a table. This result set is a reection of data from the selected elds of the tables. It is also known as a view.
7.  Click the “Save” button in the Quick Access toolbar. Type a name for your view and click “OK” to save the query.

**Data Modeling**

Data modeling is a process of developing conceptual representation of data objects and their relations. Data models are used to express how the information will be stored in database. This helps to identify the most important elds and remove the irrelevant data. Data models can be used by database developers to create a physical database. This saves a lot of time and efforts of developers. There are three most important components of data models.
**(i) Entity**
**(ii) Relationship**
**(iii) Referential Keys**

**7.3.1 Entity**

In literal sense, an entity is any individual object which has its own qualities and properties. In database terms, an entity is an independent table and its elds are known as attributes. As an example, a Payroll database will contain an entity named Employees. The Employees entity will contain various attributes like EmployeeID, Name, Designation, Salary, etc.

**7.3.2 Relationship**

When the database structures grew and became more complex, a lot of data started to become redundant which means that data was being unnecessarily duplicated. This created a need to connect data entities instead of repeating same data in multiple tables. This resulted in the creation of relationships and Relational Database Management Systems (RDBMS). A relationship denes the connection between two tables. It creates a connection from an attribute of one entity with an attribute of another entity. Three types of relationships can be dened between entities.

**(i) One to One Relationship**

This type of relationship denes that a record in one entity can be connected to only one record in another entity. This is not a very common type of relationship because the data from related entities can directly be placed in a single entity. However, this type of relationship is used to divide larger entities into smaller ones.

**(ii) One to Many Relationship**

This type of relationship denes that a record in one entity can be connected to many records in another entity. This is the most common type of relationship used in relational databases. This relationship can also be seen as Many to One Relationship.

**(iii) Many to Many Relationship**

In this type of relationship, one or more records of one entity are connected to one or more records of another entity. Usually, a third entity known as “junction table” is used to create the many-to-many relationship between two related entities.

**7.3.3 Referential Keys**

The relationships are congured by using referential keys on entities. The keys determine a certain set of rules that must be followed by the data stored in a eld of an entity. In larger databases, keys are very important to uniquely identify a specic record. Two types of keys are most commonly used in RDBMSs:

**(i) Primary Key**

A primary key is used to uniquely identify a record in an entity. When a primary key is applied to any attribute in an entity, it forces the rules of Primary Key onto that attribute. These rules are:

*   The attribute (eld) must contain a unique value to identify a record. A unique value means that two records in the same entity cannot have the same value stored in this attribute where Primary Key is applied.
*   The value of the attribute where Primary Key is applied, cannot be null.

**(ii) Foreign Key**

A foreign key is used to dene the connection or relation between two entities. The foreign key of one entity is congured to be connected to the primary key of another entity. When a foreign key is applied on an attribute, it enforces that the value for that attribute should match any record in the related entity having a primary key.

**Understanding relationship and referential keys:**

The gure 7.3 shows four tables and their elds.

**Students** table is used to store personal information of individual student. It has an Id eld set as a Primary Key. It also has a ClassId eld to setup a One-to-One foreign key relationship with the Class table.

**Class** table is used to store information about classrooms in a school. It has an Id eld set as a Primary Key. A student can be enrolled in only one class; hence, Students table has a One-to-One relationship with Class table. However, many teachers can be associated with many classes. This requires a Many-to-Many relationship between Class and Teachers tables.

**Teachers** table is used to store personal information about a teacher. It has an Id eld set as a Primary Key. Many classes can be taught by many teachers. This requires a Many-to-Many relationship between Teachers and Class tables.

**TeachersClass** table is used as a junction table to facilitate the Many-to- Many relationship between Teacher and Class tables. It also contains an Id eld set as Primary Key. The other two elds are used to dene which teachers are associated with which classes. It creates a One-to-Many relationship with each of the two connected tables. Teachers and Class tables use their TeachersClassId eld's foreign key relationship to fetch the related information from this table.

**7.3.4 Entity Relationship or ER Model**

Entity Relationship Model (ERM) or Entity Relationship Diagram (ERD) describes the entities, attributes and relationships with their types in a simplied diagram. This model or diagram can itself be used as the reference for designing an actual database. It can even be used as a backup for the structure of a database. The ERD can be used in two ways:

*   When the database has not been created yet. The ERD helps in creating a clear representation of the entire database based on user requirements.
*   When an existing database needs to be documented. The Database development tool features automatic creation of ERD based on existing database which facilitates documentation.

**(i) Components of ER Diagram**

ER Design is made up of different components like Attributes, Relationships, etc. There are dened symbols and shapes to represent each one of them. Some of the shapes used to dene these components are: A rectangle is used to dene an **entity**. This can be any real-world object like Student, Teacher, Class, etc. An ellipse denes an **attribute** of an entity. One entity may contain multiple attributes and are dened by multiple ellipses.

**Relationships** are symbolically represented by diamond shape. It simply states the type of relationship between two entities. Connecting lines show the **type of relationship** between two entities. These lines are annotated by 1 or M (stands for Many) at their ends to describe the type of relationship.

**(ii) Steps to design ER Model**

1.  Identify and design the entities based on the requirements of its users.
2.  Identify and design the attributes within the required entities.
3.  Identify the relationships required between entities.
4.  Dene Primary Keys in interrelated entities.
5.  Design Foreign Key relationships based on requirements and bind them to previously created Primary Keys.
6.  Generate an automated Entity Relationship Diagram For example a sample ERD for the statement “A writer creates a novel and consumer buys novel” is discussed below. Here in this example, diagram shows that:
    *   Entities are in rectangular Box
        1.  Writer
        2.  Consumer
        3.  Novel
    *   Relationships are in Diamond Shape
        1.  Create
        2.  Buys

**SUMMARY**

*   A database stores data in an organized form.
*   Databases are used in many different organizations and various industries.
*   A Database Management System (DBMS) software allows convenient creation, modication and display of data in a database.
*   There are many popular DBMS programs such as Microsoft SQL, MySQL, Oracle, etc.
*   The data in a at le database is limited to rows and columns in a table.
*   Flat le databases usually store data as plain text.
*   A DBMS can handle huge sets of data and has multi-user support.
*   The elds in a table can be dened as one of the supported data types which best suits the type of data it holds.
*   A Relational DBMS introduces concepts of entities, attributes, relationships and keys.
*   A table is also called an entity, a record is also called row or tuple and a eld is also called an attribute or column.
*   There are essentially two types of relationships: One-to-One relationship and One-to-Many relationship.
*   One-to-One relationship relates a record from one entity to only one record of another entity.
*   One-to-Many relationship relates a record from one entity to one or more records of another entity.
*   Many-to-Many relationship is a combination of two One-to-Many relationships with the help of a junction table.
*   Relationships make use of Keys.
*   Two common types of keys are Primary Keys and Foreign Keys.
*   Primary key uniquely identies records in an entity.
*   Foreign key denes a relationship between two entities.
*   Entity Relationship Model (ERM) or Entity Relationship Diagram (ERD) graphically displays the structure of a database.
*   The components of ERD include Entities, Attributes and Relationships.
*   ERDs are used to either design a new database or document an existing one.

**EXERCISE**

**A. Choose the right answer.**

1.  Which of the following Microsoft Ofce packages is a DBMS?
    a) MS- Word
    b) MS- Excel
    c) MS- Power Point
    d) MS- Access
2.  The basic limitation of a at le database is that:
    a) It is complicated
    b) It stores data in a single le
    c) It is very heavy
    d) It is not supported on internet
3.  In a database table of “Students”, the address of the student will be a:
    a) Record
    b) Field
    c) Entity
    d) Data type
4.  In a database table of “Students”, the particulars of a single student will be a:
    a) Record
    b) Field
    c) Entity
    d) Data type
5.  In a relational database, keys are used to create a:
    a) Table
    b) Fields
    c) Records
    d) Relationship
6.  A eld that stores the names of students should be dened as:
    a) Integer
    b) Float
    c) String
    d) Boolean
7.  A key that allows only unique entries in a eld is called:
    a) Primary Key
    b) Secondary Key
    c) Foreign Key
    d) Super Key
8.  Data Redundancy means:
    a) Duplication of Data
    b) Variety of Data
    c) Size of Data
    d) Data Type
9.  The relationship that matches one record of an entity with only one record of another entity is called:
    a) One-to-One relationship
    b) One-to-Many relationship
    c) Many-to-One relationship
    d) Many-to-Many relationship
10. The shape that is used to represent an attribute in an ERD is:
    a) A diamond
    b) An octagon
    c) A rectangle
    d) An ellipse

**B. Respond the following:**

1.  Why Database Management System is preferred over Flat File System?
2.  Discuss the use of databases in business with example.
3.  What is the difference between Design View and Datasheet View?
4.  Why is it important to carefully decide the data type for each eld?
5.  What is the difference between table and view?
6.  Explain entities, attributes and relationships with one example of each.
7.  List the major characteristics of primary and foreign keys.
8.  Write three benets of using relationships in the database.
9.  Discuss the importance of ERD in business
10. Write any two statements from the following ER Diagram.

**C. Match the columns:**

**ACTIVITIES**

1.  Create few tables and practice; adding, updating and deleting records in MS Access.
2.  Create a table in MS Access by importing Excel Sheet. Examine the data type of each eld after importing. Make changes in data types where it is required.
3.  Create different views to show data from two tables.
4.  In supervision of your teacher, draw a simple ERD on paper and implement that in MS Access. Your ERD should include at least three entities, list of attributes of each table, proper data type assignment for each eld, implementation of primary and foreign keys and simple relationships between entities.